import os
from sklearn.ensemble import RandomForestClassifier
import pandas as pd
from sklearn import metrics
import matplotlib.pyplot as plt
from sklearn.metrics import PrecisionRecallDisplay
from sklearn.metrics import RocCurveDisplay
from sklearn.model_selection import RepeatedStratifiedKFold
import numpy as np

if __name__ == "__main__":

    print("Select the most common SNPs from NINDS2 dataset and check those SNPs quality for getting the accuracy on NINDS2:")    
    
    SNPsDic = {34086: 34, 107444: 31, 85935: 30, 168673: 28, 171754: 27, 236071: 27, 85104: 25, 59235: 25, 100383: 25, 238665: 24, 8321: 23, 42104: 22, 204104: 22, 4100: 22, 14127: 21, 236535: 21, 153090: 21, 238664: 21, 59232: 21, 1965: 21, 140682: 20, 4101: 20, 47432: 20, 107445: 20, 48556: 20, 48856: 20, 198131: 20, 215152: 20, 104324: 19, 179868: 19, 215156: 19, 13360: 19, 4099: 19, 191122: 19, 99669: 19, 112728: 19, 65429: 18, 90330: 18, 37700: 18, 20172: 18, 204903: 18, 123814: 18, 68385: 18, 200488: 18, 189473: 17, 178657: 17, 239: 17, 104852: 17, 134663: 17, 172024: 17, 100379: 17, 159854: 17, 129606: 17, 83512: 17, 104284: 17, 204100: 17, 144394: 17, 168116: 17, 142471: 17, 109445: 17, 176236: 16, 76413: 16, 36654: 16, 185283: 16, 126567: 16, 95924: 16, 177121: 16, 10240: 16, 68383: 16, 79349: 16, 235175: 16, 229408: 15, 30608: 15, 219247: 15, 238075: 15, 54249: 15, 195682: 15, 197072: 15, 227020: 15, 122912: 15, 197678: 15, 96872: 15, 191256: 15, 62062: 15, 148742: 15, 206107: 15, 4501: 15, 192942: 15, 166146: 15, 227023: 15, 146455: 15, 156059: 14, 66716: 14, 206853: 14, 215151: 14, 109420: 14, 220231: 14, 132096: 14, 73509: 14, 204901: 14, 208636: 14, 227625: 14, 41526: 14, 156869: 14, 172980: 14, 88488: 14, 166297: 14, 159969: 14, 30610: 14, 194120: 14, 87390: 13, 215150: 13, 55108: 13, 149417: 13, 128326: 13, 123701: 13, 235542: 13, 40422: 13, 211515: 13, 233680: 13, 49925: 13, 204503: 13, 30605: 13, 7227: 13, 12978: 13, 104550: 13, 211611: 13, 51260: 13, 156978: 13, 117582: 13, 236470: 13, 76509: 13, 91617: 13, 205390: 13, 235183: 13, 100961: 13, 90080: 13, 30131: 13, 206127: 13, 2832: 13, 179869: 12, 160795: 12, 27347: 12, 134164: 12, 59986: 12, 193469: 12, 189297: 12, 138993: 12, 180358: 12, 205389: 12, 37717: 12, 36653: 12, 234057: 12, 30617: 12, 63240: 12, 129985: 12, 46947: 12, 167973: 12, 141180: 12, 39051: 12, 20175: 12, 30601: 12, 138752: 12, 129253: 12, 111602: 12, 22195: 12, 76337: 12, 22757: 12, 84768: 12, 46117: 12, 207155: 12, 180784: 12, 128476: 12, 88487: 12, 238545: 12, 91899: 12, 117909: 11, 54401: 11, 82642: 11, 99670: 11, 140677: 11, 6929: 11, 231058: 11, 221074: 11, 237274: 11, 140107: 11, 140874: 11, 218786: 11, 125340: 11, 111979: 11, 206035: 11, 104281: 11, 84827: 11, 100210: 11, 235176: 11, 232031: 11, 7098: 11, 209652: 11, 115134: 11, 152971: 11, 235228: 11, 200832: 11, 107848: 10, 215154: 10, 112137: 10, 26917: 10, 174540: 10, 42455: 10, 197017: 10, 63991: 10, 22871: 10, 35455: 10, 15887: 10, 70170: 10, 52434: 10, 79776: 10, 46082: 10, 76333: 10, 130578: 10, 181111: 10, 167970: 10, 7479: 10, 100091: 10, 194446: 10, 62058: 10, 192926: 10, 23857: 10, 221324: 10, 20171: 10, 209323: 10, 46098: 10, 198023: 10, 168210: 10, 56772: 10, 105814: 10, 84527: 10, 53235: 10, 186181: 10, 12334: 10, 104357: 10, 94211: 10, 21606: 10, 5825: 10, 56768: 10, 169417: 10, 105317: 10, 211517: 9, 76332: 9, 204105: 9, 50118: 9, 213240: 9, 16823: 9, 37886: 9, 89584: 9, 143583: 9, 68081: 9, 201693: 9, 155733: 9, 235191: 9, 209324: 9, 76490: 9, 64358: 9, 52054: 9, 237304: 9, 148500: 9, 3175: 9, 225638: 9, 76503: 9, 37989: 9, 52428: 9, 7226: 9, 202790: 9, 51259: 9, 109067: 9, 79609: 9, 210237: 9, 218504: 9, 51843: 9, 221198: 9, 36257: 9, 129993: 9, 137330: 9, 206585: 9, 155732: 9, 112121: 9, 204063: 9, 179850: 9, 76493: 9, 135773: 9, 236949: 9, 190761: 9, 42661: 9, 203319: 9, 73079: 9, 119745: 9, 123803: 9, 10602: 9, 4939: 9, 109436: 9, 16680: 9, 157170: 9, 123813: 9, 86774: 9, 206857: 9, 238864: 9, 197913: 9, 84832: 9, 121638: 8, 35722: 8, 201296: 8, 42458: 8, 90491: 8, 221070: 8, 108118: 8, 140870: 8, 51844: 8, 186680: 8, 204672: 8, 75998: 8, 18342: 8, 37721: 8, 88075: 8, 235799: 8, 92519: 8, 123124: 8, 52419: 8, 5546: 8, 76339: 8, 167722: 8, 169270: 8, 90823: 8, 112683: 8, 173902: 8, 47052: 8, 117689: 8, 224368: 8, 20177: 8, 94254: 8, 142731: 8, 141160: 8, 227024: 8, 12347: 8, 160788: 8, 138308: 8, 39507: 8, 30510: 8, 164952: 8, 46128: 8, 28828: 8, 215937: 8, 129991: 8, 29511: 8, 41055: 8, 67304: 8, 9388: 8, 42102: 8, 168317: 8, 3060: 8, 174543: 8, 97212: 8, 196534: 8, 31929: 8, 41989: 8, 82627: 8, 224602: 8, 96721: 8, 109611: 8, 134517: 8, 227496: 8, 101920: 8, 126453: 7, 99753: 7, 192526: 7, 115065: 7, 138600: 7, 118638: 7, 209977: 7, 147379: 7, 229003: 7, 41206: 7, 157645: 7, 199915: 7, 41653: 7, 127722: 7, 169878: 7, 197044: 7, 105584: 7, 126976: 7, 214670: 7, 48519: 7, 53688: 7, 232365: 7, 32266: 7, 160231: 7, 72735: 7, 5548: 7, 16679: 7, 195994: 7, 146012: 7, 41664: 7, 4492: 7, 165605: 7, 91014: 7, 155543: 7, 168468: 7, 3454: 7, 87165: 7, 17632: 7, 51725: 7, 13121: 7, 206588: 7, 161966: 7, 72589: 7, 99409: 7, 182589: 7, 148492: 7, 233320: 7, 191835: 7, 48670: 7, 212526: 7, 25815: 7, 6932: 7, 178996: 7, 86794: 7, 198701: 7, 90488: 7, 215697: 7, 225622: 7, 92524: 7, 222994: 7, 110184: 7, 143161: 7, 99735: 7, 235547: 7, 220315: 7, 173268: 7, 192691: 7, 192955: 7, 129982: 7, 148708: 7, 17638: 7, 148715: 7, 180778: 7, 52347: 7, 42712: 7, 181407: 7, 129983: 7, 233750: 7, 8044: 7, 89586: 7, 103274: 7, 230940: 7, 134830: 7, 1335: 7, 218983: 7, 118263: 7, 107443: 7, 233679: 7, 93083: 7, 84834: 7, 101774: 7, 27856: 7, 139623: 7, 236340: 7, 48871: 7, 18803: 7, 135730: 7, 118262: 7, 79884: 7, 205372: 7, 198024: 7, 72577: 7, 95136: 7, 41813: 6, 75095: 6, 24501: 6, 236915: 6, 203350: 6, 48261: 6, 126047: 6, 120306: 6, 63166: 6, 192963: 6, 54389: 6, 197675: 6, 156693: 6, 213679: 6, 5116: 6, 176410: 6, 19767: 6, 41985: 6, 156660: 6, 116385: 6, 46099: 6, 98310: 6, 26636: 6, 118342: 6, 175671: 6, 23580: 6, 21740: 6, 59812: 6, 235154: 6, 96871: 6, 147468: 6, 163634: 6, 21608: 6, 99542: 6, 158494: 6, 25123: 6, 17366: 6, 75765: 6, 28871: 6, 148737: 6, 21709: 6, 212620: 6, 75991: 6, 157167: 6, 36801: 6, 115164: 6, 45378: 6, 31306: 6, 159441: 6, 53191: 6, 17326: 6, 15892: 6, 82660: 6, 78603: 6, 28375: 6, 173047: 6, 203990: 6, 16896: 6, 188254: 6, 228100: 6, 35689: 6, 80568: 6, 159157: 6, 48520: 6, 160761: 6, 209603: 6, 31750: 6, 196007: 6, 141379: 6, 103404: 6, 46104: 6, 51845: 6, 182271: 6, 44648: 6, 75585: 6, 187630: 6, 130983: 6, 108327: 6, 95729: 6, 58077: 6, 32771: 6, 7234: 6, 56333: 6, 84833: 6, 43019: 6, 147545: 6, 27345: 6, 152980: 6, 32770: 6, 226308: 6, 52072: 6, 154645: 6, 76009: 6, 104588: 6, 191121: 6, 77994: 6, 20462: 6, 225977: 6, 13955: 6, 141383: 6, 99051: 6, 171988: 6, 85560: 6, 25972: 6, 121657: 6, 175813: 6, 129156: 6, 64720: 6, 147522: 6, 117168: 6, 37993: 6, 28867: 6, 119875: 6, 192796: 6, 463: 6, 41790: 6, 111501: 6, 229324: 6, 37991: 6, 157854: 6, 132323: 6, 163645: 6, 124886: 6, 159763: 6, 103770: 6, 144559: 6, 178709: 6, 68396: 6, 37720: 6, 184136: 6, 103266: 6, 219027: 6, 89581: 6, 6720: 6, 150320: 6, 163029: 6, 67674: 6, 222716: 6, 104900: 6, 153087: 6, 198791: 6, 38874: 6, 191613: 6, 189998: 6, 227566: 6, 3227: 6, 145778: 6, 89585: 6, 158028: 5, 122910: 5, 228491: 5, 194998: 5, 107457: 5, 123386: 5, 238927: 5, 30785: 5, 88014: 5, 31551: 5, 64160: 5, 224251: 5, 128038: 5, 130401: 5, 36187: 5, 48641: 5, 26550: 5, 98156: 5, 87714: 5, 87131: 5, 236931: 5, 88794: 5, 170792: 5, 80: 5, 124421: 5, 234130: 5, 217427: 5, 68072: 5, 166392: 5, 217725: 5, 132271: 5, 209676: 5, 11202: 5, 57276: 5, 70786: 5, 148766: 5, 54387: 5, 124433: 5, 123800: 5, 98635: 5, 156082: 5, 187179: 5, 157162: 5, 150097: 5, 25537: 5, 156081: 5, 175703: 5, 200540: 5, 118949: 5, 219204: 5, 31496: 5, 173139: 5, 192842: 5, 153752: 5, 171929: 5, 143628: 5, 179612: 5, 206552: 5, 234835: 5, 68436: 5, 98246: 5, 100800: 5, 95634: 5, 37897: 5, 20174: 5, 118951: 5, 68544: 5, 57858: 5, 98267: 5, 61997: 5, 189151: 5, 87780: 5, 5512: 5, 168119: 5, 80571: 5, 21710: 5, 142282: 5, 51842: 5, 227565: 5, 124324: 5, 51248: 5, 203450: 5, 24408: 5, 164917: 5, 11903: 5, 234625: 5, 58868: 5, 20659: 5, 16488: 5, 21399: 5, 166311: 5, 164898: 5, 26713: 5, 37927: 5, 193471: 5, 134461: 5, 214288: 5, 80573: 5, 11585: 5, 234436: 5, 111010: 5, 125946: 5, 172027: 5, 219646: 5, 219030: 5, 38360: 5, 199938: 5, 16678: 5, 208640: 5, 8682: 5, 223972: 5, 21738: 5, 227552: 5, 124511: 5, 231979: 5, 162811: 5, 169677: 5, 159909: 5, 215166: 5, 62877: 5, 179428: 5, 117253: 5, 180378: 5, 143163: 5, 45732: 5, 85107: 5, 123504: 5, 23576: 5, 22951: 5, 28975: 5, 111486: 5, 37986: 5, 143818: 5, 235493: 5, 70428: 5, 186667: 5, 170123: 5, 125715: 5, 213157: 5, 208234: 5, 100490: 5, 42965: 5, 141204: 5, 59865: 5, 120485: 5, 64726: 5, 139802: 5, 38982: 5, 74783: 5, 83572: 5, 147508: 5, 83430: 5, 21976: 5, 20170: 5, 183952: 5, 194996: 5, 120143: 5, 119018: 5, 238919: 5, 65382: 5, 143580: 5, 215157: 5, 235156: 5, 140738: 5, 210614: 5, 15271: 5, 169120: 5, 49929: 5, 24896: 5, 180360: 5, 128477: 5}

    
    SNPsList = list(SNPsDic.keys())
    print(len(SNPsList))

    path = '/scratch/fs2/usefi/pd/datasets/All_Aproaches/Approach0/Datasets/'

    print("current path of working space= " + path)
  
        
    # This is the smaller dataset (we found the SNPs from this dataset)
    print("Reading PD_2_NINDS_28Jan2022.csv ...")
    df= pd.read_csv(path + "PD_2_NINDS_28Jan2022.csv")
    
    count_row = df.shape[0]  # gives number of row count
    count_col = df.shape[1]  # gives number of col count

    print("The Number Samples in This Dataset: " + str(count_row))
    print("The Number Features in This Dataset: " + str(count_col))

    # X contains selected features except the labels
    x = df.iloc[:, SNPsList]
    # x = df.iloc[:, df.columns.isin(SNPsList)]

    # y contains The labels
    y = df.iloc[:, -1]
    
    print(x.shape)
    
    counter = 0
    folds = RepeatedStratifiedKFold(n_splits=5, n_repeats=1, random_state=1)
    acc_list = []
            
    for train_idx, test_dix in folds.split(x, y):
        train_x, test_x = x.iloc[train_idx, :], x.iloc[test_dix, :]
        train_y, test_y = y.iloc[train_idx], y.iloc[test_dix]
        
        counter = counter + 1
        clf = RandomForestClassifier()
        clf.fit(train_x, train_y)
        y_pred = clf.predict(test_x)
        acc = metrics.accuracy_score(test_y, y_pred)
        acc_list.append(acc)
        
        print("Round " + str(counter) + ": ")
        print(acc * 100)
        print('\n')
        
        print(metrics.confusion_matrix(y_true=test_y, y_pred=y_pred))
        print(f"Classification report for classifier {clf}:\n"
          f"{metrics.classification_report(test_y, y_pred)}\n")

    print("Average accuracy (among 5 rounds) is : %.2f" % (np.average(acc_list) * 100))
    print("SD of ACC is : %.2f" % (np.std(acc_list) * 100))